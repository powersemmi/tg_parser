[project]
name = "chat-parser"
version = "1.0.0"
description = "Telegram-client parser"
authors = [
    {name = "Chebotarev Victor", email = "powersemmi@gmail.com"},
]
dependencies = [
    "faststream[nats,cli,prometheus]==0.5.*",
    "sqlalchemy[asyncio,mypy]==2.0.*",
    "telethon==1.40.*",
    "httpx==0.28.*",
    "alembic==1.16.*",
    "asyncpg==0.30.*",
    "logging518==1.0.*",
    "pydantic==2.11.*",
    "pydantic-settings==2.9.*",
    "orjson==3.10.*",
    "gunicorn==23.0.*",
    "uvicorn[standard]==0.34.*",
    "tenacity==9.1.*",
    "frozendict==2.4.*",
    "python-socks[asyncio]==2.7.*",
    "asyncstdlib==3.13.*"
]
requires-python = "==3.13.*"
readme = "README.md"
license = {text = "MIT"}

[tool.pdm]
[tool.pdm.scripts]
_.env_file = ".env"
# lint
check = "python -m ruff check --fix --preview ."
format = "python -m ruff format --preview ."
mypy = "python -m mypy ."
lint = {composite = ["format", "check", "mypy"]}
# migrates
alembic = "alembic -c src/crawler/migrations/alembic.ini "
migrate = {composite = ["alembic upgrade head"]}
downgrade = {composite = ["alembic downgrade"]}
makemigration = {composite = ["alembic revision --autogenerate -m"]}
# run
main = "python -m tg_chat_parser"

[tool.pdm.dev-dependencies]
lint = [
    "ruff==0.11.*",
    "mypy==1.16.*",
    "types-PyYAML==6.0.*",
    "types-pytz==2025.2.*"
]
test = [
    "pytest==8.4.*",
    "pytest-asyncio==1.0.*",
    "pytest-cov==4.1.*",
    "pytest-mock==3.14.0",
    "pytest-freezegun==0.4.2",
    "pytest-httpx==0.35.0",
]
pdm = [
    "pdm==2.24.2",
    "setuptools==80.9.0",
    "wheel==0.45.1",
    "pip==25.1.1",
]

[tool.pdm.options]
add = ["--no-isolation", "--no-self"]
install = ["--no-self", "--no-isolation"]
lock = ["--no-isolation"]

[tool.pdm.resolution]
respect-source-order = true

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.ruff]
target-version = "py313"
line-length = 79

[tool.ruff.lint]
extend-select = [
    "I",    # isort
    "YTT",  # flake8-2020
    "ASYNC",# flake8-async
    "T20",  # flake8-print
    "S",    # flake8-bandit
    "B",    # flake8-bugbear
    "LOG",  # flake8-logging
    "PT",   # flake8-pytest-style
    "C4",   # flake8-comprehensions
    "PGH",  # pygrep-hooks
    "RUF",  # ruff
    "W",    # pycodestyle
    "E",    # pycodestyle
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "C90",  # mccabe
]
fixable = ["ALL"]
unfixable = []
extend-ignore = ["F401", "F841", "RUF003", "RUF002", "RUF006", "RUF001"]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    # at least these three should be fine in tests:
    "S101", # asserts allowed in tests...
    "ARG", # Unused function args -> fixtures, nevertheless, are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    # The below are debateable
    "PLR2004", # Magic value used in comparison, ...
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
    "RUF029",
]
"scripts/**/*.py" = [
    'T201', 'E501'
]

[tool.ruff.lint.mccabe]
max-complexity = 7

[tool.mypy]
plugins = "pydantic.mypy,sqlalchemy.ext.mypy.plugin"
ignore_missing_imports = true
strict_optional = true
no_implicit_optional = true
disallow_any_generics = true
disallow_untyped_defs = true
strict_equality = true
warn_unreachable = true
warn_no_return = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
exclude = ["venv", "scripts", "tmp"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
pythonpath = [".", "src",]
log_cli = true

[tool.logging]
version = 1
disable_existing_loggers = false

[tool.logging.formatters.simple]
format = "%(levelname)s | %(asctime)-20s | %(threadName)s | %(name)s | %(message)s"

[tool.logging.handlers.console]
formatter = "simple"
stream = "ext://sys.stdout"
class = "logging.StreamHandler"

[tool.logging.root]
level = "DEBUG"
handlers = ["console"]
